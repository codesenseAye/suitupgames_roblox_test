/*
	Miscellaneous snippets that will make your life easier!
*/

{
    /////// Knit Snippets ///////

	"Knit Service":{
		"prefix": ["knits"],
		"body": [
			"--[[",	
			"\tDescribe this knit service",	
			"]]",	
			"",
			"------------------------------Roblox Services-----------------------------------",	
			"",	
			"local ReplicatedStorage = game:GetService(\"ReplicatedStorage\")",	
			"",	
			"------------------------------Knit-----------------------------------",	
			"",	
			"local Knit = require(ReplicatedStorage.Packages.Knit)",	
			"",	
			"------------------------------Types-----------------------------------",	
			"",	
			"local Types = require(ReplicatedStorage.Shared.Types)",	
			"",	
			"------------------------------Util-----------------------------------",	
			"",	
			"local Trove = require(ReplicatedStorage.Packages.Trove)",	
			"",	
			"------------------------------Constants-----------------------------------",
			"",	
			"------------------------------Fields-----------------------------------",
			"",	
			"------------------------------Service Dependencies-----------------------------------",	
			"",	
			"local DataService",	
			"",	
			"------------------------------Knit Service-----------------------------------",	
			"",	
			"local ${TM_FILENAME_BASE} = Knit.CreateService({",	
				"\tName = \"${TM_FILENAME_BASE}\"",	
			"})",	
			"",	
			"------------------------------Local Functions-----------------------------------",	
			"",	
			"------------------------------Public Methods-----------------------------------",	
			"",	
			"------------------------------Private Methods-----------------------------------",	
			"",	
			"------------------------------Lifetime Methods-----------------------------------",	
			"",	
			"-- define global lifetime services",	
			"function ${TM_FILENAME_BASE}:KnitInit(): ()",	
			"\tDataService = Knit.GetService(\"DataService\")",	
			"end",	
			"",	
			"-- start up logic",	
			"function ${TM_FILENAME_BASE}:KnitStart(): ()",	
			"\t",	
			"end",	
			"",	
			"return ${TM_FILENAME_BASE}",	
		]
	},

	"Knit Controller":{
		"prefix": ["knitc"],
		"body": [
			"--[[",	
			"\tDescribe this knit controller",	
			"]]",	
			"",
			"------------------------------Roblox Services-----------------------------------",	
			"",	
			"local ReplicatedStorage = game:GetService(\"ReplicatedStorage\")",	
			"",	
			"------------------------------Knit-----------------------------------",	
			"",	
			"local Knit = require(ReplicatedStorage.Packages.Knit)",	
			"",	
			"------------------------------Types-----------------------------------",	
			"",	
			"local Types = require(ReplicatedStorage.Shared.Types)",	
			"",	
			"------------------------------Util-----------------------------------",	
			"",	
			"local Trove = require(ReplicatedStorage.Packages.Trove)",	
			"",	
			"------------------------------Constants-----------------------------------",
			"",	
			"------------------------------Fields-----------------------------------",
			"",	
			"------------------------------Service & Controller Dependencies-----------------------------------",	
			"",	
			"local DataController",	
			"",	
			"------------------------------Knit Service-----------------------------------",	
			"",	
			"local ${TM_FILENAME_BASE} = Knit.CreateController({",	
				"\tName = \"${TM_FILENAME_BASE}\"",	
			"})",	
			"",	
			"------------------------------Local Functions-----------------------------------",	
			"",	
			"------------------------------Public Methods-----------------------------------",	
			"",	
			"------------------------------Private Methods-----------------------------------",	
			"",	
			"------------------------------Lifetime Methods-----------------------------------",	
			"",	
			"-- define global lifetime controllers / services",	
			"function ${TM_FILENAME_BASE}:KnitInit(): ()",	
			"\tDataController = Knit.GetController(\"DataController\")",	
			"end",	
			"",	
			"-- start up logic",	
			"function ${TM_FILENAME_BASE}:KnitStart(): ()",	
			"\t",	
			"end",	
			"",	
			"return ${TM_FILENAME_BASE}",	
		]
	},

	//#endregion
}